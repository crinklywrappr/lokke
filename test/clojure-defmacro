#!./lokke -0
;; -*-clojure-*-
!#

;;; Copyright (C) 2019 2021 Rob Browning <rlb@defaultvalue.org>
;;; SPDX-License-Identifier: LGPL-2.1-or-later OR EPL-1.0+

(ns test.clojure-defmacro
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]))

;; FIXME: everything...

(begin-tests (ns-name *ns*))

(def q (atom nil))

(defmacro question! [what]
  `(reset! q ~what))

(defn ask []
  (question! :shall-we-play-a-game?))

(is (= nil (deref q)))
(ask)
(is (= :shall-we-play-a-game? (deref q)))

;; Make sure we can handle compilation of literals, i.e. that we
;; properly convert the clojure instances back to their literal
;; (sexp) form for consumption by the macroexpander/compiler.
(defmacro test-map-expansion [] {1 2})
(is (= {1 2} (test-map-expansion)))
(defmacro test-map-entry-expansion [] (first (seq {1 2})))
(is (= [1 2] (test-map-entry-expansion)))
(defmacro test-set-expansion [] #{1})
(is (= #{1} (test-set-expansion)))
(defmacro test-vec-expansion [] [1])
(is (= [1] (test-vec-expansion)))

(defmacro test-inst-expansion [] #inst "1977-09-05T12:56:00Z")
(testing "tagged literals"
  ;; Make sure we can handle compilation of tagged literals, i.e. that
  ;; we properly convert them back to literals for consumption by the
  ;; macroexpander/compiler.
  (is (= #inst "1977-09-05T12:56:00Z" (test-inst-expansion))))

(end-tests (ns-name *ns*) :exit? true)
