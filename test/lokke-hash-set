#!./guile
!# ;; -*-scheme-*-

;;; Copyright (C) 2019 Rob Browning <rlb@defaultvalue.org>
;;; SPDX-License-Identifier: LGPL-2.1-or-later OR EPL-1.0+

(use-modules
 ((lokke scm test) #:select (test-end-and-exit))
 ((lokke scm test-anything)
  #:select (tap-test-runner))
 ((lokke collection) #:select (clj= counted? reduce seq))
 ((lokke hash-set) #:prefix t/)
 ((srfi srfi-1) #:select (iota))
 ((srfi srfi-64)
  #:select (test-assert
            test-begin
            test-eq
            test-equal
            test-eqv
            test-group
            test-runner-current)))

(when (equal? "tap" (getenv "LOKKE_TEST_PROTOCOL"))
  (test-runner-current (tap-test-runner)))

(test-begin (basename (car (program-arguments))))

(test-assert (t/hash-set? (t/hash-set)))
(test-assert (not (t/hash-set? 'something)))

(test-assert (counted? (t/hash-set)))

(test-assert (clj= (t/hash-set) (t/hash-set)))
(test-assert (clj= (t/hash-set 1) (t/hash-set 1)))
(test-assert (clj= (t/hash-set 1 2) (t/hash-set 1 2)))
(test-assert (not (clj= (t/hash-set) (t/hash-set 1))))

(test-assert (clj= (t/hash-set 1) (t/set '(1))))

(test-assert (clj= (t/hash-set 1) (t/conj (t/hash-set) 1)))
(test-assert (clj= (t/hash-set 1 2) (t/conj (t/hash-set) 1 2)))
(test-assert (not (clj= (t/hash-set) (t/conj (t/hash-set) 1))))

(test-assert (clj= (t/hash-set 2) (t/disj (t/hash-set 1 2) 1)))
(test-assert (clj= (t/hash-set) (t/disj (t/hash-set 1 2) 1 2)))
(test-assert (clj= (t/hash-set) (t/disj (t/hash-set 1 2) 1 2 3)))

(test-eqv 0 (t/count (t/hash-set)))
(test-eqv 1 (t/count (t/hash-set 1)))
(test-eqv 2 (t/count (t/hash-set 1 2)))

(test-assert (clj= (t/hash-set) (t/empty (t/hash-set 1 2 3))))

(test-assert (not (t/contains? (t/hash-set) 1)))
(test-assert (t/contains? (t/hash-set 1) 1))
(test-assert (t/contains? (t/hash-set 1 2 3) 2))

(test-eq #nil (t/get (t/hash-set) 1))
(test-assert (t/get (t/hash-set 1) 1))
(test-assert (t/get (t/hash-set 1 2 3) 2))
(test-eq 'not-found (t/get (t/hash-set) 1 'not-found))

(test-eqv 0 (reduce + (t/hash-set)))
(test-eqv 15 (reduce + (t/hash-set 1 2 3 4 5)))
(test-eqv 16 (reduce + 1 (t/hash-set 1 2 3 4 5)))
(test-eqv "x" (reduce / (t/hash-set "x")))

(test-end-and-exit 2)
