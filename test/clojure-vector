#!./lokke -0
;; -*-clojure-*-
!#

;;; Copyright (C) 2019 Rob Browning <rlb@defaultvalue.org>
;;; SPDX-License-Identifier: LGPL-2.1-or-later OR EPL-1.0+

(ns test.clojure-vector
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]))

(begin-tests (ns-name *ns*))

;; FIXME: test errors for nth, etc.

(testing "vec"
  (is (vector? []))
  (is (vector? (vector)))
  (is (not (vector? 'something)))
  (is (empty? []))
  (is (empty? (vector)))
  (is (= [1 2 3] [1 2 3]))
  (is (= [1 2 3] (vector 1 2 3)))
  (is (= [1 2 3] (vec '(1 2 3))))
  (is (= [1 2 3] '(1 2 3))))

(testing "subvec"
  ;; Some "extra" tests are included because (subvec v 0) may be optimized to v
  (is (vector? (subvec [] 0)))
  (is (vector? (subvec [1 2 3] 1)))
  (is (vector? (subvec [1 2 3] 1 2)))
  (is (empty? (subvec [] 0)))
  (is (empty? (subvec [1] 1)))

  ;; additional seq tests further down
  (is (= nil (seq (subvec [] 0))))
  (is (= nil (seq (subvec [1 2 3] 3 3))))

  (testing "(= subvec subvec)"
    (is (= (subvec [1 2 3] 1) (subvec [1 2 3] 1)))
    (is (not= (subvec [1 2 3] 1) (subvec [1 0 3] 1)))
    (is (not= (subvec [1 2] 1) (subvec [1 2 3] 1)))
    (is (not= (subvec [1 2 3] 1) (subvec [1 2] 1))))

  (testing "(= subvec vec) and reverse"
    (is (= [1 2 3] (subvec [1 2 3] 0)))
    (is (not= [1 2] (subvec [1 2 3] 0)))
    (is (not= [1 2 3] (subvec [1 2] 0)))
    ;; reversed
    (is (= (subvec [1 2 3] 0) [1 2 3]))
    (is (not= (subvec [1 2 3] 0) [1 2]))
    (is (not= (subvec [1 2] 0) [1 2 3]))

    (is (= [2 3] (subvec [1 2 3] 1)))
    (is (not= [2] (subvec [1 2 3] 1)))
    (is (not= [2 3] (subvec [1 2] 1)))
    ;; reversed
    (is (= (subvec [1 2 3] 1) [2 3]))
    (is (not= (subvec [1 2 3] 1) [2]))
    (is (not= (subvec [1 2] 1) [2 3])))

  (testing "(= subvec coll) and reverse"
    (is (= '(1 2 3) (subvec [1 2 3] 0)))
    (is (= '(1 2 3) (subvec [0 1 2 3] 1)))
    (is (= (subvec [1 2 3] 0) '(1 2 3)))
    (is (= (subvec [0 1 2 3] 1) '(1 2 3))))

  (testing "subvec of subvec"
    (is (= [3 4 5] (subvec (subvec [1 2 3 4 5] 1) 1)))))

(testing "metadata"
  (doseq [[kind x] [["vector" []]
                    ["subvec" (subvec [1 2 3] 1 2)]]]
    (testing (str "for " kind)
      (is (= nil (meta x)))
      (is (= nil (meta (with-meta x nil))))
      (is (= {} (meta (with-meta x {}))))
      (is (= {:x 1} (meta (with-meta x {:x 1}))))
      ;;(is (= {:x 1} (meta (assoc (with-meta x {:x 1}) 0 1) )))
      )))

(doseq [[kind x] [["vector" [1 2 3]]
                  ["subvec" (subvec [1 2 3] 0)]
                  ["prefix subvec" (subvec [0 1 2 3] 1)]
                  ["internal subvec" (subvec [0 1 2 3 4] 1 4)]]]
  (testing (str "misc for " kind)
    (is (vector? x))
    (is (counted? x))
    (is (= 3 (count x)))
    (is (= true (contains? x 0)))
    (is (= true (contains? x 1)))
    (is (= true (contains? x 2)))
    (is (= false (contains? x 3)))
    (is (= false (contains? x :nope)))
    (is (= 1 (nth x 0)))
    (is (= 2 (nth x 1)))
    (is (= 3 (nth x 2)))
    (is (= :nope (get x 100 :nope)))
    (is (= [1 2 3 4] (conj x 4)))
    (is (= [1 :foo 3] (assoc x 1 :foo)))
    (is (= [1 2 3 4] (assoc x 3 4)))
    (is (= [1 2 3 4 5 6 7] (assoc x 3 4 4 5 5 6 6 7)))
    (is (= [1 2 4] (update x 2 inc)))
    (is (= [1 2 3 nil] (update x 3 identity)))
    (is (= [0 1] (find x 0)))
    (is (= [1 2] (find x 1)))
    (is (= [2 3] (find x 2)))
    (is (= nil (find x 3)))
    (is (= nil (find x :nope)))
    (is (= x (seq x)))))

(end-tests (ns-name *ns*) :exit? true)
