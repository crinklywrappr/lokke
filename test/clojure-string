#!./lokke -0
;; -*-clojure-*-
!#

;;; Copyright (C) 2019 Rob Browning <rlb@defaultvalue.org>
;;; SPDX-License-Identifier: LGPL-2.1-or-later OR EPL-1.0+

(ns test.clojure-string
  (:require
   [clojure.string
    :refer [blank?
            capitalize
            ends-with?
            includes?
            join
            lower-case
            split
            split-lines
            starts-with?
            trim
            trim-newline
            triml
            trimr
            upper-case]])
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]))

(begin-tests (ns-name *ns*))

(testing "count"
  (is (= 0 (count "")))
  (is (= 1 (count "x"))))

(testing "seq"
  (is (= nil (seq "")))
  (is (= [\x] (seq "x"))))

(testing "blank?"
  (is (blank? ""))
  (is (blank? " "))
  (is (blank? "\t"))
  (is (blank? "\n"))
  (is (blank? "\r"))
  (is (blank? "\f"))
  (is (not (blank? "x")))
  (is (not (blank? " x")))
  (is (not (blank? "x ")))
  (is (not (blank? " x "))))

(testing "capitalize"
 (is (= "X" (capitalize "X")))
 (is (= "X" (capitalize "x")))
 (is (= "Xy" (capitalize "Xy")))
 (is (= "Xy" (capitalize "XY")))
 (is (= "Xy" (capitalize "xy"))))

(testing "lower-case"
 (is (= "xyz" (lower-case "xyz")))
 (is (= "xyz" (lower-case "XYZ")))
 (is (= "xyz" (lower-case "xYz"))))

(testing "upper-case"
 (is (= "XYZ" (upper-case "xyz")))
 (is (= "XYZ" (upper-case "XYZ")))
 (is (= "XYZ" (upper-case "xYz"))))

(testing "starts-with?"
  (is (starts-with? "xyz" "xy"))
  (is (not (starts-with? "xyz" "z"))))

(testing "ends-with?"
  (is (ends-with? "xyz" "z"))
  (is (not (ends-with? "xyz" "xy"))))

(testing "includes?"
  (is (includes? "x" "x"))
  (is (includes? "xyz" "y"))
  (is (includes? "xyz" "z"))
  (is (not (includes? "x" "xy"))))

(testing "join"
  (is (= "" (join "-" [])))
  (is (= "x" (join "-" ["x"])))
  (is (= "x-y" (join "-" ["x" "y"])))
  (is (= "x-y" (join \- ["x" "y"])))
  (is (= "1-2" (join \- [1 2]))))

(testing "trim"
  (is (= "" (trim "")))
  (is (= "x" (trim "x")))
  (is (= "x" (trim " x")))
  (is (= "x" (trim " x ")))
  (is (= "x" (trim "  x  "))))

(testing "triml"
  (is (= "" (triml "")))
  (is (= "x" (triml "x")))
  (is (= "x" (triml " x")))
  (is (= "x " (triml " x ")))
  (is (= "x  " (triml "  x  "))))

(testing "trimr"
  (is (= "" (trimr "")))
  (is (= "x" (trimr "x")))
  (is (= " x" (trimr " x")))
  (is (= " x" (trimr " x ")))
  (is (= "  x" (trimr "  x  "))))

(testing "trim-newline"
  (is (= "" (trim-newline "")))
  (is (= "x" (trim-newline "x")))
  (is (= "" (trim-newline "\n")))
  (is (= "" (trim-newline "\r")))
  (is (= "\nx" (trim-newline "\nx")))
  (is (= "\rx" (trim-newline "\rx")))
  (is (= "x" (trim-newline "x\n")))
  (is (= "x" (trim-newline "x\r")))
  (is (= "\r\nx" (trim-newline "\r\nx\r\n")))
  (is (= " \nx\r " (trim-newline " \nx\r "))))


;; FIXME: test utf32 patterns/strings

(testing "(str pattern)"
  (is (= "x" (str #"x")))
  (is (= "\\\"x" (str #"\"x"))))

(testing "re-matcher"
  (is (re-matcher (re-pattern "x") "x")))

(defn matches [m]
  (take-while identity
              (repeatedly #(let [groups (re-find m)]
                             ;; FIXME: test for re-groups no-match exceptions
                             (when groups
                               (is (= groups (re-groups m))))
                             groups))))

(testing "re-find"
  (is (= "" (re-find (re-pattern "") "")))
  (is (not (re-find (re-pattern "x") "y")))
  (is (= "x" (re-find (re-pattern "x") "x")))
  (is (= ["x" "x"] (re-find (re-pattern "(x)") "x")))
  (is (not (re-find (re-pattern "^y") "xy")))
  (is (= "y" (re-find (re-pattern "y") "xy")))

  (is (= [] (matches (re-matcher (re-pattern "x") "y"))))
  (is (= ["x"] (matches (re-matcher (re-pattern "x") "x"))))
  (is (= [["x" "x"]] (matches (re-matcher (re-pattern "(x)") "x"))))
  (is (= [] (matches (re-matcher (re-pattern "^y") "xy"))))
  (is (= ["y"] (matches (re-matcher (re-pattern "y") "xy")))))

(testing "re-matches"
  (is (= "" (re-matches (re-pattern "") "")))
  (is (not (re-matches (re-pattern "x") "y")))
  (is (= "x" (re-matches (re-pattern "x") "x")))
  (is (= ["x" "x"] (re-matches (re-pattern "(x)") "x")))
  (is (not (re-matches (re-pattern "^y") "xy")))
  (is (= nil (re-matches (re-pattern "y") "xy")))
  (is (= nil (re-matches (re-pattern "y") "yx")))

  (is (= [] (matches (re-matcher (re-pattern "x") "y"))))
  (is (= ["x"] (matches (re-matcher (re-pattern "x") "x"))))
  (is (= [["x" "x"]] (matches (re-matcher (re-pattern "(x)") "x"))))
  (is (= [] (matches (re-matcher (re-pattern "^y") "xy"))))
  (is (= ["y"] (matches (re-matcher (re-pattern "y") "xy")))))

(testing "re-seq"
  (is (= nil (re-seq (re-pattern "x") "y")))  ;; Match the jvm, not the docs
  (is (= ["" "" "" ""] (re-seq (re-pattern "") "xxx")))
  (is (= ["x" "x" "x"] (re-seq (re-pattern "x") "xxx")))
  (is (= [["x" "x"] ["x" "x"] ["x" "x"]] (re-seq (re-pattern "(x)") "xxx"))))

(testing "split"  ;; For now, this somewhat matches the JVM
  (is (= ["xyz"] (split "xyz" #"w")))
  (is (= ["x" "y" "z"] (split "x/y/z" #"/")))
  (is (= ["" "y" "z"] (split "/y/z" #"/")))

  ;; Leading empty match is dropped (matches JDK 8+)
  (is (= ["x" "y" "z"] (split "xyz" #"")))

  (is (= ["x/y/z"] (split "x/y/z" #"/" 1)))
  (is (= ["x" "y/z"] (split "x/y/z" #"/" 2)))
  (is (= ["x" "y" "z"] (split "x/y/z" #"/" 3)))
  (is (= ["x" "y" "z"] (split "x/y/z" #"/" 4)))

  (is (= ["xyz" "" "" ""] (split "xyz///" #"/" 10)))
  (is (= ["xyz" "" "" ""] (split "xyz///" #"/" -10)))
  ;; All trailing empty matches are dropped when limit is 0
  (is (= ["xyz"] (split "xyz///" #"/")))
  (is (= ["xyz"] (split "xyz///" #"/" 0))))

(testing "split-lines"
  (is (= ["xyz"] (split-lines "xyz")))
  (is (= ["x" "y" "z"] (split-lines "x\ny\nz")))
  (is (= ["x" "y" "z"] (split-lines "x\ny\nz\n")))
  (is (= ["x" "y" "z"] (split-lines "x\ny\nz\n\n\n")))
  (is (= ["x" "" "y"] (split-lines "x\n\ny")))
  (is (= ["x" "" "" "y"] (split-lines "x\n\n\ny")))
  (is (= ["" "x"] (split-lines "\nx")))
  (is (= ["" "" "x"] (split-lines "\n\nx"))))

(end-tests (ns-name *ns*) :exit? true)
