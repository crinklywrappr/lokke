#!./guile
!# ;; -*-scheme-*-

;;; Copyright (C) 2019 Rob Browning <rlb@defaultvalue.org>
;;; SPDX-License-Identifier: LGPL-2.1-or-later OR EPL-1.0+

(use-modules
 ((lokke scm test) #:select (test-end-and-exit))
 ((lokke scm test-anything) #:select (tap-test-runner))
 ((lokke collection) #:select (clj= seq->scm-list))
 ((lokke base syntax) #:select ((let . let**)))
 ((lokke hash-map) #:select (hash-map))
 ((srfi srfi-1) #:select (iota))
 ((srfi srfi-64)
  #:select (test-assert
            test-begin
            test-eq
            test-equal
            test-group
            test-runner-current)))

(define /lokke/reader-hash-map (@ (lokke hash-map) hash-map))

(when (equal? "tap" (getenv "LOKKE_TEST_PROTOCOL"))
  (test-runner-current (tap-test-runner)))

(test-begin (basename (car (program-arguments))))

(test-group
 "basics"
 (test-eq #nil (let** ()))
 (test-equal 1 (let** (x 1) x))
 (test-equal '(1 2) (let** (x 1 y 2) (list x y))))

(test-group
 "scm vectors"
 (test-equal #nil (let** (#(x) #()) x))
 (test-equal '(#nil #nil) (let** (#(x y) #()) (list x y)))
 (test-equal 1 (let** (#(x) #(1 2)) x))
 (test-equal '(1 2) (let** (#(x y) #(1 2)) (list x y)))
 (test-equal '(1 2) (seq->scm-list (let** (#(& more) #(1 2)) more)))
 (test-equal 1 (let** (#(x & more) #(1 2)) x))
 (test-equal '(2) (seq->scm-list (let** (#(x & more) #(1 2)) more)))
 ;; :as
 (test-equal '(1 2) (seq->scm-list (let** (#(x #:as all) #(1 2)) all)))
 (test-equal '(1 2) (seq->scm-list (let** (#(x & more #:as all) #(1 2)) all))))

(test-group
 "reader vectors"
 (test-equal #nil (let** ((/lokke/reader-vector #nil x) #()) x))
 (test-equal '(#nil #nil) (let** ((/lokke/reader-vector #nil x y) #()) (list x y)))
 (test-equal 1 (let** ((/lokke/reader-vector #nil x) #(1 2)) x))
 (test-equal '(1 2) (let** ((/lokke/reader-vector #nil x y) #(1 2)) (list x y)))
 (test-equal '(1 2) (seq->scm-list (let** ((/lokke/reader-vector #nil & more) #(1 2)) more)))
 (test-equal 1 (let** ((/lokke/reader-vector #nil x & more) #(1 2)) x))
 (test-equal '(2) (seq->scm-list (let** ((/lokke/reader-vector #nil x & more) #(1 2)) more)))
 ;; :as
 (test-equal '(1 2) (seq->scm-list (let** ((/lokke/reader-vector #nil x #:as all) #(1 2)) all)))
 (test-equal '(1 2) (seq->scm-list (let** ((/lokke/reader-vector #nil x & more #:as all) #(1 2)) all))))

(test-group
 "destructuring seq values"
 ;; via vec destructuring
 (test-equal '(#nil #nil) (let** (#(x y) '()) (list x y)))
 (test-equal 1 (let** (#(x) '(1 2)) x))
 (test-equal '(2) (seq->scm-list (let** (#(x & more) #(1 2)) more)))
 ;; via map destructuring
 (test-equal #nil (let** ((/lokke/reader-hash-map #nil #:keys #(x)) #nil) x))
 (test-equal #nil (let** ((/lokke/reader-hash-map #nil #:keys #(x)) '()) x))
 (test-equal 1 (let** ((/lokke/reader-hash-map #nil #:keys #(x)) '(#:x 1)) x)))

(test-group
 "reader maps"

 ;; {#:x y}
 (test-equal #nil (let** ((/lokke/reader-hash-map #nil x :y) (hash-map)) x))
 (test-equal 1 (let** ((/lokke/reader-hash-map #nil x y) (hash-map 'y 1)) x))
 (test-equal 1 (let** ((/lokke/reader-hash-map #nil x #:y) (hash-map #:y 1)) x))
 (test-equal 1 (let** ((/lokke/reader-hash-map #nil x "y") (hash-map "y" 1)) x))

 ;; {#:keys [...] #:syms [...] #:strs [...]}
 (test-equal #nil (let** ((/lokke/reader-hash-map #nil #:keys #(x)) (hash-map)) x))
 (test-equal #nil (let** ((/lokke/reader-hash-map #nil #:syms #(x)) (hash-map)) x))
 (test-equal #nil (let** ((/lokke/reader-hash-map #nil #:strs #(x)) (hash-map)) x))
 (test-equal 1 (let** ((/lokke/reader-hash-map #nil #:keys #(x)) (hash-map #:x 1)) x))
 (test-equal 1 (let** ((/lokke/reader-hash-map #nil #:syms #(x)) (hash-map 'x 1)) x))
 (test-equal 1 (let** ((/lokke/reader-hash-map #nil #:strs #(x)) (hash-map "x" 1)) x))

 ;; :or
 (test-equal #nil
   (let** ((/lokke/reader-hash-map #nil #:keys #(x) #:or (/lokke/reader-hash-map #nil))
           (hash-map))
          x))
 (test-equal 1
   (let** ((/lokke/reader-hash-map #nil #:keys #(x) #:or (/lokke/reader-hash-map #nil x 1))
           (hash-map))
          x))
 (test-equal '(0)
   (let** ((/lokke/reader-hash-map #nil #:keys #(x) #:or (/lokke/reader-hash-map #nil x (iota 1)))
           (hash-map))
          x))

 ;; :as
 (test-assert
     (clj= (hash-map #:x 1 #:y 2)
           (let** ((/lokke/reader-hash-map #nil x #:y #:as all)
                   (hash-map #:x 1 #:y 2)) all)))
 (test-assert
     (clj= (hash-map #:x 1 #:y 2)
           (let** ((/lokke/reader-hash-map #nil #:keys #(x) #:as all)
                   (hash-map #:x 1 #:y 2)) all))))

(test-end-and-exit 2)
