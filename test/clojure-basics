#!./lokke -0
;; -*-clojure-*-
!#

;;; Copyright (C) 2020 Rob Browning <rlb@defaultvalue.org>
;;; SPDX-License-Identifier: LGPL-2.1-or-later OR EPL-1.0+

(ns test.clojure-basics
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]
   [lokke.exception :refer [ex-tag]]))

(begin-tests (ns-name *ns*))

(is (= nil (let [])))

(testing "version"
  (is (string? (clojure-version)))
  (is (re-matches #"\d+\.\d+\.\d+" (clojure-version)))
  (is (int? (:major *clojure-version*)))
  (is (int? (:minor *clojure-version*)))
  (is (int? (:increment *clojure-version*)))
  (is (or (int? (:increment *clojure-version*))
          (nil? (:increment *clojure-version*)))))

(testing "boolean"
  (is (= false (boolean false)))
  (is (= false (boolean nil)))
  (is (= true (boolean true)))
  (is (= true (boolean 1)))
  (is (= true (boolean "")))
  (is (= true (boolean :nope)))
  (is (= true (boolean [])))
  (is (= true (boolean ()))))

(testing "boolean?"
  (is (= true (boolean? true)))
  (is (= true (boolean? false)))
  (is (= false (boolean? nil)))
  (is (= false (boolean? 1)))
  (is (= false (boolean? "nope")))
  (is (= false (boolean? :nope)))
  (is (= false (boolean? ())))
  (is (= false (boolean? []))))

(testing "fn?"
  (is (not (fn? true)))
  (is (fn? (fn [] true))))

(testing "as->"
  (is (= :yep (as-> :yep x)))
  (is (= 1 (as-> 0 x (inc x))))
  (is (= "1" (as-> 0 x (inc x) (str x)))))

(testing "case"
  (try
    (case :nope)
    (catch Throwable ex
      (is (= 'misc-error (ex-tag ex)))))
  (is (= :nope (case :x :nope)))
  (is (= :nope (case :x () :yep :nope)))
  (is (= :nope (case :x :y :yep :nope)))
  (is (= :nope (case :x (:y) :yep :nope)))
  (is (= :nope (case :x (:y :z) :yep :nope)))
  (is (= :nope (case :x :a :a (:y :z) :yep :nope)))
  (is (= :nope (case :x (:y :z) :yep :a :a :nope)))
  (is (= :nope (case :x :a :a (:y :z) :yep :a :a :nope)))
  (is (= :yep (case :x :x :yep :nope)))
  (is (= :yep (case :x (:x) :yep :nope)))
  (is (= :yep (case :x (:x :y) :yep :nope)))
  (is (= :yep (case :x (:y :x) :yep :nope)))
  (is (= :yep (case :x :a :a (:y :x) :yep :nope)))
  (is (= :yep (case :x (:y :x) :yep :a :a :nope)))
  (is (= :yep (case :x :a :a (:y :x) :yep :a :a :nope)))
  (is (= :yep (case 1 1 :yep)))
  (is (= :yep (case 'x x :yep)))
  (is (= :yep (case 'and and :yep)))
  (is (= :yep (case 'and (and) :yep)))
  (is (= :yep (case '+ + :yep)))
  (is (= :yep (case '+ (+) :yep)))
  (is (= :yep (case "x" "x" :yep)))
  (is (= :yep (case [1] [1] :yep)))
  (is (= :yep (case #{1} #{1} :yep)))
  (is (= :yep (case {1 2} {1 2} :yep))))

(testing "cond->"
  (is (= :yep (cond-> :yep)))
  (is (= :yep (cond-> :yep (nil? :x) name)))
  (is (= "yep" (cond-> :yep (nil? nil) name)))
  (is (= 'yep (cond-> :yep (nil? :x) name (nil? nil) symbol)))
  (is (= "yep" (cond-> :yep (nil? nil) name (nil? :x) symbol)))
  (is (= 'yep (cond-> :yep (nil? nil) name (nil? nil) symbol)))
  (is (= "yep!" (cond-> "yep" (nil? nil) (str "!"))))
  (is (= "yep!?" (cond-> "yep" (nil? nil) (str "!") (nil? nil) (str "?")))))

(testing "cond->>"
  (is (= :yep (cond->> :yep)))
  (is (= :yep (cond->> :yep (nil? :x) name)))
  (is (= "yep" (cond->> :yep (nil? nil) name)))
  (is (= 'yep (cond->> :yep (nil? :x) name (nil? nil) symbol)))
  (is (= "yep" (cond->> :yep (nil? nil) name (nil? :x) symbol)))
  (is (= 'yep (cond->> :yep (nil? nil) name (nil? nil) symbol)))
  (is (= "!yep" (cond->> "yep" (nil? nil) (str "!"))))
  (is (= "?!yep" (cond->> "yep" (nil? nil) (str "!") (nil? nil) (str "?")))))

(testing "condp"
  (is (= :yep (condp < 0 -1 :yep)))
  (is (= :nope (condp < 0 0 :yep :nope)))
  (is (= :yep (condp < 0 0 :nope -3 :yep)))
  (is (= :yep (condp < 0 0 :nope -3 :yep :nope)))
  (is (= true (condp < 0 0 :nope -3 :>> identity :nope))))

(testing "juxt"
  (is (= [1] ((juxt identity) 1)))
  (is (= [2 0] ((juxt inc dec) 1))))

(testing "min-key"
  (let [k (fn [x] (if (odd? x) 1 0))]
    (is (= 1 (min-key k 1)))
    (is (= 1 (min-key identity 1 2)))
    (is (= 1 (min-key identity 2 1)))
    (is (= 2 (min-key k 1 2)))
    (is (= 2 (min-key k 2 1)))
    (is (= 4 (min-key k 1 2 3 4)))
    (is (= 2 (min-key k 4 3 2 1)))))

(testing "max-key"
  (let [k (fn [x] (if (odd? x) 1 0))]
    (is (= 1 (max-key k 1)))
    (is (= 2 (max-key identity 1 2)))
    (is (= 2 (max-key identity 2 1)))
    (is (= 1 (max-key k 1 2)))
    (is (= 1 (max-key k 2 1)))
    (is (= 3 (max-key k 1 2 3 4)))
    (is (= 1 (max-key k 4 3 2 1)))))

(testing "some->"
  (is (= :yep (some-> :yep)))
  (is (= true (some-> :yep keyword?)))
  (is (= false (some-> :yep string?)))
  (is (= "yep!" (some-> "yep" (str "!")))))

(testing "some->>"
  (is (= :yep (some->> :yep)))
  (is (= true (some->> :yep keyword?)))
  (is (= false (some->> :yep string?)))
  (is (= "...yep" (some->> "yep" (str "...")))))

(testing "if-some"
  (is (= nil (if-some [x nil] :yep)))
  (is (= :nope (if-some [x nil] :yep :nope)))
  (is (= :yep (if-some [x false] :yep :nope)))
  (is (= :yep (if-some [x :yep] x)))
  (is (= :yep (if-some [x :yep] x :nope))))

(testing "when-some"
  (is (= nil (when-some [x nil] :yep)))
  (is (= false (when-some [x false] x)))
  (is (= false (when-some [x false] 1 2 3 x))))

(testing "when-first"
  (is (= nil (when-first [x nil] :yep)))
  (is (= nil (when-first [x []] x)))
  (is (= 1 (when-first [x [1]] x)))
  (is (= 1 (when-first [x [1 2 3]] x)))
  (is (= 1 (when-first [x [1]] 1 2 3 x)))
  (let [evals (atom 0)
        coll #(do (swap! evals inc) [1 2 3])]
    (is (= 1 (when-first [x (coll)] x)))
    (is (= 1 @evals))))

(testing "sort"
  ;; FIXME: test stability
  (is (= [1 2 3 4 5] (sort '(1 2 3 4 5))))
  (is (= [1 2 3 4 5] (sort '(5 2 1 4 3))))
  (is (= [1 2 3 4 5] (sort [1 2 3 4 5])))
  (is (= [1 2 3 4 5] (sort [5 2 1 4 3])))
  (is (= [2 2 3 4 5] (sort [5 2 2 4 3]))))

(testing "fnil"
  (let [parrot #(do %&)]
    (is (= [1] ((fnil parrot :yep) 1)))
    (is (= [:yep] ((fnil parrot :yep) nil)))
    (is (= [1 2] ((fnil parrot :yep) 1 2)))
    (is (= [:yep 1] ((fnil parrot :yep) nil 1)))
    (is (= [:yep nil] ((fnil parrot :yep) nil nil)))
    (is (= (range 30) (apply (fnil parrot :yep) (range 30))))
    (is (= (cons :yep (range 30))
           (apply (fnil parrot :yep) nil (range 30))))))

(testing "future"
  (is (= :yep (deref (future :yep))))
  (is (= :yep (deref (future-call (constantly :yep))))))

(testing "time"
  (let [out (with-out-str (time true))]
    (is (re-matches (re-pattern "\"Elapsed time: \\d+\\.\\d+ msecs\"\\n")
                    out)))
  (with-out-str (is (= :yep (time :yep)))))

(testing "trampoline"
  (let [bouncer (fn bouncer [n]
                  (if (pos? n)
                    (fn [] (bouncer (dec n)))
                    (fn [] :tired)))]
    (is (= :tired (trampoline (bouncer 0))))
    (is (= :tired (trampoline (bouncer 1))))
    (is (= :tired (trampoline (bouncer 2))))))

(is (= *warn-on-reflection* false))

(end-tests (ns-name *ns*) :exit? true)
