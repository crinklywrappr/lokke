#!./lokke -0
;; -*-clojure-*-
!#

;;; Copyright (C) 2019-2020 Rob Browning <rlb@defaultvalue.org>
;;; SPDX-License-Identifier: LGPL-2.1-or-later OR EPL-1.0+

(ns test.clojure-metadata
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]))

(begin-tests (ns-name *ns*))

(testing "vector"
  (is (= nil (meta [])))
  (is (= nil (meta (with-meta [] nil))))
  (is (= {} (meta (with-meta [] {}))))
  (is (= {:x 1} (meta (with-meta [] {:x 1}))))
  (is (= {:x 1} (meta (conj (with-meta [] {:x 1}) 0 1))))

  (is (= {:tag 'x} (let [x 'x] (meta ^x []))))
  (is (= {:tag "x"} (meta ^"x" [])))
  (is (= {:x true} (meta ^:x [])))
  (is (= {:x :y} (meta ^{:x :y} [])))
  (is (= {:w :x :y :z} (meta ^{:w :x} ^{:y :z} [])))
  (is (= {:w :x} (meta ^{:w :x} ^{:w :z} []))))

(testing "hash-map"
  (is (= nil (meta {})))
  (is (= nil (meta (with-meta {} nil))))
  (is (= {} (meta (with-meta {} {}))))
  (is (= {:x 1} (meta (with-meta {} {:x 1}))))
  (is (= {:x 1} (meta (assoc (with-meta {} {:x 1}) 0 1))))

  (is (= {:tag 'x} (meta ^x {})))
  (is (= {:tag "x"} (meta ^"x" {})))
  (is (= {:x true} (meta ^:x {})))
  (is (= {:x :y} (meta ^{:x :y} {})))
  (is (= {:w :x :y :z} (meta ^{:w :x} ^{:y :z} {})))
  (is (= {:w :x} (meta ^{:w :x} ^{:w :z} {}))))

(testing "hash-set"
  (is (= nil (meta #{})))
  (is (= nil (meta (with-meta #{} nil))))
  (is (= {} (meta (with-meta #{} {}))))
  (is (= {:x 1} (meta (with-meta #{} {:x 1}))))
  (is (= {:x 1} (meta (conj (with-meta #{} {:x 1}) 0 1))))

  (is (= {:tag 'x} (meta ^x #{})))
  (is (= {:tag "x"} (meta ^"x" #{})))
  (is (= {:x true} (meta ^:x #{})))
  (is (= {:x :y} (meta ^{:x :y} #{})))
  (is (= {:w :x :y :z} (meta ^{:w :x} ^{:y :z} #{})))
  (is (= {:w :x} (meta ^{:w :x} ^{:w :z} #{}))))

(def meta-test-var nil)

(testing "variables"
  (is (= nil (meta #'meta-test-var)))

  (alter-meta! #'meta-test-var assoc :x 1)
  (is (= {:x 1} (meta #'meta-test-var)))

  (alter-meta! #'meta-test-var (constantly nil))
  (is (= nil (meta #'meta-test-var))))

(testing "ns"
  (let [cur (ns-name *ns*)]
    (ns ^{:author "someone"} meta-test-ns)
    (in-ns cur))
  (let [test-ns (find-ns 'meta-test-ns)]
    (is (= nil (meta test-ns)))

    (alter-meta! test-ns assoc :x 1)
    (is (= {:x 1} (meta test-ns)))

    (alter-meta! test-ns (constantly nil))
    (is (= nil (meta test-ns)))))

(defn one [] 1)

(testing "let"
  (is (= 1 (let [^int x (one)] x)))
  (is (= [1 1] (let [^int x (one) ^int y (one)] [x y]))))

(testing "for"
  (is (= [1 2 3] (for [^int x [1 2 3]] x)))
  (is (= [[1 2]] (for [^int x [1] ^int y [2]] [x y]))))

(end-tests (ns-name *ns*) :exit? true)
