#!./lokke -0
;; -*-clojure-*-
!#

;;; Copyright (C) 2020 Rob Browning <rlb@defaultvalue.org>
;;; SPDX-License-Identifier: LGPL-2.1-or-later OR EPL-1.0+

(ns test.clojure-comparison
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]))

(begin-tests (ns-name *ns*))

(testing "="
  (is (= nil))

  (is (= nil nil))
  (is (not= nil true))
  (is (not= :x nil))

  (is (= true true))
  (is (not= true false))
  (is (not= :x true))

  (is (= \x \x))
  (is (not= \x \y))
  (is (not= :y \x))

  (is (= "x" "x"))
  (is (not= "x" "y"))
  (is (not= :y "x"))

  (is (= 'x 'x))
  (is (not= 'x 'y))
  (is (not= :y 'x))

  (is (= :x :x))
  (is (not= :x :y))
  (is (not= :x/z :y/z))
  (is (not= "y" :x))

  (is (= 0 0))
  (is (not= 0 1))
  (is (not= 0 0.0))
  (is (not= 1.0 1))
  (is (= 1.1 1.1))
  (is (not= 0.0 0.1))
  (is (= 1/2 1/2))
  (is (not= 1/2 0.5))

  (is (= [] '()))
  (is (= #{} #{}))
  (is (= {} {}))
  (is (= [1 2 3] '(1 2 3)))
  (is (= #{1 2 3} #{1 2 3}))
  (is (= {1 2 3 4} {3 4 1 2}))
  (is (not= [] {}))
  (is (not= [] #{}))
  (is (not= [1] #{}))
  (is (not= [1 2] '(1 2 3)))
  (is (not= [1 2] #{1 2}))
  (is (not= #{1 2} #{1 3}))
  (is (not= {1 2} {1 3}))
  (is (not= [[1 2]] {1 2}))

  (let [x (atom nil)] (is (= x x)))
  (let [x (promise)] (is (= x x)))
  (is (not= (atom nil) (atom nil)))
  (is (not= (promise) (promise))))

(testing "=="
  ;; FIXME: test exceptions for non-numbers
  (is (== 0 0))
  (is (== 0 0.0))
  (is (== 0.0 -0.0))
  (is (== 1.1 1.1))
  (is (not (== 0 1)))
  (is (not (== 1.0 0)))
  (is (not (== 0 ##NaN)))
  (is (not (== ##NaN ##NaN))))

(testing "<"
  (is (< 0 1))
  (is (not (< 0 0)))
  (is (not (< 1 0))))

(testing "<="
  (is (<= 0 1))
  (is (<= 0 0))
  (is (not (<= 1 0))))

(testing ">"
  (is (> 1 0))
  (is (not (> 1 1)))
  (is (not (> 0 1))))

(testing ">"
  (is (>= 1 0))
  (is (>= 1 1))
  (is (not (>= 0 1))))

(testing "hash"
  (is (= (hash nil) (hash nil)))
  (is (not= (hash :nope) (hash nil)))

  (is (= (hash true) (hash true)))
  (is (= (hash false) (hash false)))
  (is (not= (hash true) (hash false)))

  (is (= (hash :x) (hash :x)))
  (when (> (:major *clojure-version*) 2)
    ;; Unfortunately, guile-2.2 had a bug in the hash function.
    (is (not= (hash :x) (hash :y)))
    (is (not= (hash :x) (hash :y/x)))
    (is (not= (hash :x/z) (hash :y/z))))
  (is (not= (hash :x) (hash true)))

  (is (= (hash 1) (hash 1)))
  (is (= (hash 1.0) (hash 1.0)))
  (is (= (hash 1/2) (hash 1/2)))
  (is (not= (hash 1) (hash 2)))
  (is (not= (hash 1) (hash 1.0)))
  (is (not= (hash 1) (hash 1/2)))

  (is (= (hash \x) (hash \x)))
  (is (not= (hash \x) (hash \y)))
  (is (not= (hash \x) (hash true)))

  (is (= (hash "") (hash "")))
  (is (= (hash "x") (hash "x")))
  (is (= (hash "xy") (hash (str "x" "y"))))
  (is (not= (hash "x") (hash "")))
  (is (not= (hash "x") (hash true)))

  (is (= (hash ()) (hash [])))
  (is (= (hash '(1 2 3)) (hash [1 2 3])))
  (is (= (hash '(1 2 3)) (hash (seq [1 2 3]))))
  (is (= (hash [1 2 3]) (hash (seq [1 2 3]))))

  (is (= (hash #{}) (hash (set []))))
  (is (= (hash #{1 2 3}) (hash (set [1 2 3]))))
  (is (= (hash {}) (hash (hash-map))))
  (is (= (hash {1 2 3 4}) (hash (hash-map 3 4 1 2))))
  (is (= (hash {1 2 3 [4 5 6]})
         (hash (hash-map 3 '(4 5 6) 1 2))))

  (is (= (hash [0 1 '(2 [3] #{4 5 {6 7 8 9}})])
         (hash '(0 1 [2 (3) #{4 5 {8 9 6 7}}]))))

  (let [x (atom nil)] (is (= (hash x) (hash x))))
  (let [x (promise)] (is (= (hash x) (hash x))))
  (when (> (:major *clojure-version*) 2)
    ;; Unfortunately, guile-2.2 had a bug in the hash function.
    (is (not= (hash (atom nil)) (hash (atom nil))))
    (is (not= (hash (promise)) (hash (promise)))))

  (testing "caching"
    (is (not (zero? (hash [1 2 3]))))
    (let [x (vector [1 2 3])]
      (is (= (hash x) (hash x)))
      (is (not (zero? (hash x)))))))

(end-tests (ns-name *ns*) :exit? true)
