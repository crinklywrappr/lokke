#!./lokke -0
;; -*-clojure-*-
!#

;;; Copyright (C) 2019-2020 Rob Browning <rlb@defaultvalue.org>
;;; SPDX-License-Identifier: LGPL-2.1-or-later OR EPL-1.0+

(ns test.clojure-ns
  (:require
   [clojure.string :as str]
   [guile.guile :refer [module-public-interface module-variable]]
   [guile.lokke.exception :refer [ex-tag]])
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]))

(begin-tests (ns-name *ns*))

(is (= 'test.clojure-ns (ns-name *ns*)))
(is (= clojure.string/join str/join))
(is (= seq (deref (find-var 'clojure.core/seq))))
(is (integer? (guile/current-time)))
(is (-> (guile.srfi.srfi-4/make-u64vector 0) guile.srfi.srfi-4/u64vector?))

(testing "x.y/z can't refer to private/unexported bindings"
  (is (guile/module-ref (guile/resolve-module '(lokke reader)) 'expand-ref))
  (try
    (prn guile.lokke.reader/expand-ref)
    (catch Throwable ex
      (if (> (guile/string->number (guile/major-version)) 2)
        (is (= 'unbound-variable (ex-tag ex)))
        (is (= 'misc-error (ex-tag ex)))))))

(ns test-ns-behavior-simple
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]))
;; FIXME: why does this cause the tests to crash?
;;(require '[clojure.test :refer [begin-tests end-tests is testing]])
(is (= 'test-ns-behavior-simple (ns-name *ns*)))
(prn (meta *ns*))
(is (= nil (meta *ns*)))
(ns test.clojure-ns)

(ns test-ns-behavior-doc
  "doc"
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]))
(is (= 'test-ns-behavior-doc (ns-name *ns*)))
(is (= {:doc "doc"} (meta *ns*)))
(ns test.clojure-ns)

(ns test-ns-behavior-attr
  {:x 1}
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]))
(is (= 'test-ns-behavior-attr (ns-name *ns*)))
(is (= {:x 1} (meta *ns*)))
(ns test.clojure-ns)

(ns test-ns-behavior-doc-and-attr
  "doc"
  {:x 1}
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]))
(is (= 'test-ns-behavior-doc-and-attr (ns-name *ns*)))
(is (= {:doc "doc" :x 1} (meta *ns*)))
(ns test.clojure-ns)

(ns test-ns-ignores-genclass
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]])
  (:gen-class))
(ns test.clojure-ns)

(ns test-def-private)
(def yep true)
(def yep-doc "doc" true)
(def- nope true)
(def- nope-doc "doc" true)
(def ^:private nope-key true)
(def ^{:private true} nope-map true)
(defn yepfn [] true)
(defn- nopefn [] true)
(ns test.clojure-ns)

(let [mod (find-ns 'test-def-private)
      public? (fn [m sym] (module-variable (module-public-interface m) sym))]
  (is (public? mod 'yep))
  (is (public? mod 'yep-doc))
  (is (public? mod 'yepfn))
  (is (not (public? mod 'nope)))
  (is (not (public? mod 'nope-doc)))
  (is (not (public? mod 'nope-key)))
  (is (not (public? mod 'nope-map)))
  (is (not (public? mod 'nopefn))))

(end-tests (ns-name *ns*) :exit? true)
