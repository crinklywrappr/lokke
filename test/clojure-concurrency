#!./lokke -0
;; -*-clojure-*-
!#

;;; Copyright (C) 2019-2021 Rob Browning <rlb@defaultvalue.org>
;;; SPDX-License-Identifier: LGPL-2.1-or-later OR EPL-1.0+

(ns test.clojure-concurrency
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]
   [guile.srfi.srfi-19
    :refer [current-time time-difference time-monotonic time-second]]))

(begin-tests (ns-name *ns*))

(is (atom? (atom 1)))
(is (= 1 @(atom 1)))
(is (= 1 (deref (atom 1))))
(is (= 2 (reset! (atom 1) 2)))

(is (= true (compare-and-set! (atom 1) 1 2)))
(is (= 2 (deref (doto (atom 1) (compare-and-set! 1 2)))))
(is (= false (compare-and-set! (atom 1) 3 2)))
(is (= 1 (deref (doto (atom 1) (compare-and-set! 3 2)))))

(is (= 2 (swap! (atom 1) inc)))

(is (= 1 (deref (future 1))))
(is (= :yep (deref (future (guile/sleep 100)) 10 :yep)))
(is (= 1 (deref (future-call (constantly 1)))))
(is (= :yep (deref (future-call #(guile/sleep 100)) 10 :yep)))

(testing "future thread count isn't restricted"
  ;; Not conclusive, but certainly suggestive
  (let [start (current-time time-monotonic)]
    (dotimes [i 100] (future (guile/sleep 1000)))
    (let [diff (time-difference (current-time time-monotonic) start)]
      (is (< (time-second diff) 10)))))

(testing "pmap"
  (is (= [1 2 3] (pmap inc [0 1 2]))))

(testing "pcalls"
  (is (= [1 2 3] (pcalls #(+ 1) #(+ 2) #(+ 3)))))

(testing "pvalues"
  (is (= [1 2 3] (pvalues (+ 1) (+ 2) (+ 3)))))

(end-tests (ns-name *ns*) :exit? true)
