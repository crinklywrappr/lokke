#!./guile
!# ;; -*-scheme-*-

;;; Copyright (C) 2019 Ryan Senior <senior.ryan@gmail.com>
;;; SPDX-License-Identifier: LGPL-2.1-or-later OR EPL-1.0+

(use-modules
 ((lokke reader) #:prefix reader/)
 ((lokke scm test) #:select (test-end-and-exit))
 ((lokke scm test-anything) #:select (tap-test-runner))
 ((lokke pr) #:prefix t/)
 ((lokke pr) #:select (*in* *out*))
 ((lokke collection) #:prefix coll/)  ;; For '(1 2 3) print specialization
 ((lokke compare) #:prefix c/)
 ((lokke vector) #:select (vector))
 ((srfi srfi-1) #:select (iota))
 ((srfi srfi-64)
  #:select (test-assert test-begin test-equal test-group test-runner-current)))

(when (equal? "tap" (getenv "LOKKE_TEST_PROTOCOL"))
  (test-runner-current (tap-test-runner)))

(test-begin (basename (car (program-arguments))))

(test-group
 "test basic printing"
 (test-equal "test string" (t/with-out-str (t/print "test string")))
 (test-equal "1" (t/print-str 1))
 (test-equal "string" (t/print-str "string"))
 (test-equal ":keyword" (t/print-str #:keyword))
 (test-equal "true" (t/print-str #t))
 (test-equal "false" (t/print-str #f))
 (test-equal "first second third" (t/print-str "first" "second" "third"))
 (test-equal "1 2 3" (t/print-str 1 2 3))
 (test-equal "nil" (t/print-str #nil))
 (test-equal "1 nil" (t/print-str 1 #nil))
 (test-equal " " (t/print-str #\space))
 (test-equal "foo" (t/print-str 'foo))
 (test-equal "()" (t/print-str '()))
 (test-equal "" (t/print-str)))

(test-group
 "test collection printing"
 (test-equal "(1 2 3)" (t/print-str '(1 2 3))))

(test-equal 42 (t/with-in-str "42" (reader/read *in*)))

(test-end-and-exit 2)
