#!./guile
!# ;; -*-scheme-*-

;;; Copyright (C) 2019 Rob Browning <rlb@defaultvalue.org>
;;; SPDX-License-Identifier: LGPL-2.1-or-later OR EPL-1.0+

(use-modules
 ((lokke scm test) #:select (test-end-and-exit))
 ((lokke scm test-anything) #:select (tap-test-runner))
 ((lokke scm vector) #:prefix t/)
 ((srfi srfi-1) #:select (iota))
 ((srfi srfi-64)
  #:select (test-assert test-begin test-equal test-group test-runner-current)))

(when (equal? "tap" (getenv "LOKKE_TEST_PROTOCOL"))
  (test-runner-current (tap-test-runner)))

(test-begin (basename (car (program-arguments))))

;; FIXME: no error tests
;; FIXME: test.check style tests (or perahps at least simple random sampling)

(test-assert (t/lokke-vector? (t/lokke-vector)))
(test-assert (not (t/lokke-vector? #f)))
(test-equal 1 (t/lokke-vector-ref (t/lokke-vector 1) 0))
(test-equal (t/lokke-vector 1 2 3) (t/list->lokke-vector '(1 2 3)))
(test-equal '(1 2 3) (t/lokke-vector->list (t/lokke-vector 1 2 3)))
(test-equal '(1 2 3) (t/lokke-vector->list (t/lokke-vec #(1 2 3))))
(test-equal '(1 2 3) (t/lokke-vector->list (t/lokke-vec '(1 2 3))))
(test-equal '(1 2 3) (t/lokke-vector->list (t/lokke-vec (t/lokke-vector 1 2 3))))

(test-equal 0 (t/lokke-vector-length (t/lokke-vector)))
(test-equal 32 (t/lokke-vector-length (t/lokke-vec (iota 32))))
(test-equal 33 (t/lokke-vector-length (t/lokke-vec (iota 33))))
(test-equal 1024 (t/lokke-vector-length (t/lokke-vec (iota 1024))))
(test-equal 1025 (t/lokke-vector-length (t/lokke-vec (iota 1025))))

(test-equal (t/lokke-vector 1) (t/lokke-vector-conj (t/lokke-vector) 1))
(test-equal (t/lokke-vector 1 2) (t/lokke-vector-conj (t/lokke-vector) 1 2))
(test-equal (t/lokke-vector 1 2 3) (t/lokke-vector-conj (t/lokke-vector) 1 2 3))

(test-equal (t/lokke-vector 1) (t/lokke-vector-assoc (t/lokke-vector) 0 1))
(test-equal (t/lokke-vector 1 3) (t/lokke-vector-assoc (t/lokke-vector) 0 1 1 3))

(test-equal (t/lokke-vector) (t/lokke-vector-append (t/lokke-vector)))
(test-equal (t/lokke-vector)
  (t/lokke-vector-append (t/lokke-vector) (t/lokke-vector)))
(test-equal (t/lokke-vector 1 2 3)
  (t/lokke-vector-append (t/lokke-vector 1) (t/lokke-vector 2 3)))

;; Use 3000 to give the tree enough depth to exercise the main paths.

(test-group
 "length and ref"
 (let ((v (t/lokke-vec (iota 3000))))
   (do ((i 0 (1+ i)))
       ((= i (t/lokke-vector-length v)))
     (test-equal i (t/lokke-vector-ref v i)))))

(test-group
 "pop"
 ;; FIXME: expensive, ~5s when last checked standalone, but why does
 ;; "make -j5 check" go much faster than that.
 (let loop ((n 3000)
            (expected (iota 3000))
            (actual (t/lokke-vec (iota 3000))))
   (test-equal expected (t/lokke-vector->list actual))
   (unless (= n 1)
     (loop (1- n) (iota (1- n)) (t/lokke-vector-pop actual)))))

(test-group
 "conj"
 (for-each
  (lambda (i)
    (let ((candidate (t/lokke-vec (iota i))))
      (test-equal (t/lokke-vec (iota (1+ i)))
        (t/lokke-vector-conj candidate i))))
  '(0 32 1024)))

(test-group
 "assoc as append"
 (for-each
  (lambda (i)
    (let ((candidate (t/lokke-vec (iota i))))
      (test-equal (t/lokke-vec (iota (1+ i)))
        (t/lokke-vector-assoc candidate i i))))
  '(0 32 1024)))

(define (canary-list n canary-i)
  (let ((result (iota n)))
    (list-set! result canary-i 'canary)
    result))

(test-group
 "internal assoc"
 ;; Give the tree enough depth to exercise the main paths.
 (for-each
  (lambda (i)
    (let ((v (t/lokke-vec (iota (1+ i)))))
      (test-equal (t/lokke-vec (canary-list (1+ i) i))
        (t/lokke-vector-assoc v i 'canary))))
  '(0 31 32 1023 1024 2999)))

(test-end-and-exit 2)
