#!./guile
!# ;; -*-scheme-*-

;;; Copyright (C) 2019 Rob Browning <rlb@defaultvalue.org>
;;; SPDX-License-Identifier: LGPL-2.1-or-later OR EPL-1.0+

(use-modules
 ((lokke scm test) #:select (test-end-and-exit))
 ((lokke scm test-anything) #:select (tap-test-runner))
 ((lokke collection)
  #:select (clj= count counted? first merge reduce second seq))
 ((lokke hash-map) #:prefix t/)
 ((lokke base map-entry) #:select (key map-entry? val))
 ((srfi srfi-1) #:select (iota))
 ((srfi srfi-64)
  #:select (test-assert
            test-begin
            test-eq
            test-equal
            test-eqv
            test-group
            test-runner-current)))

(when (equal? "tap" (getenv "LOKKE_TEST_PROTOCOL"))
  (test-runner-current (tap-test-runner)))

(test-begin (basename (car (program-arguments))))

(test-assert (t/hash-map? (t/hash-map)))
(test-assert (not (t/hash-map? 'something)))

(test-assert (counted? (t/hash-map)))

(test-assert (clj= (t/hash-map) (t/hash-map)))
(test-assert (clj= (t/hash-map 1 2) (t/hash-map 1 2)))
(test-assert (clj= (t/hash-map 1 2 3 4) (t/hash-map 1 2 3 4)))
(test-assert (not (clj= (t/hash-map) (t/hash-map 1 2))))

(test-assert (clj= (t/hash-map 1 2) (t/conj (t/hash-map) #(1 2))))
(test-assert (clj= (t/hash-map 1 2 3 4) (t/conj (t/hash-map) #(1 2) #(3 4))))

(test-assert (not (clj= (t/hash-map) (t/conj (t/hash-map) #(1 2)))))

(test-assert (clj= (t/hash-map 3 4) (t/dissoc (t/hash-map 1 2 3 4) 1)))
(test-assert (clj= (t/hash-map) (t/dissoc (t/hash-map 1 2 3 4) 1 3)))
(test-assert (clj= (t/hash-map 3 4) (t/dissoc (t/hash-map 1 2 3 4) 1 9)))
(test-assert (clj= (t/hash-map) (t/dissoc (t/hash-map 1 2 3 4) 1 3 9)))

(test-eqv 0 (t/count (t/hash-map)))
(test-eqv 1 (t/count (t/hash-map 1 2)))
(test-eqv 2 (t/count (t/hash-map 1 2 3 4)))

(test-assert (clj= (t/hash-map) (t/empty (t/hash-map 1 2))))

(test-assert (not (t/contains? (t/hash-map) 1)))
(test-assert (t/contains? (t/hash-map 1 2) 1))
(test-assert (t/contains? (t/hash-map 1 2 3 4 5 6) 3))

(test-eq #nil (t/get (t/hash-map) 1))
(test-equal 1 (t/get (t/hash-map (t/hash-map) 1) (t/hash-map)))
(test-equal 2 (t/get (t/hash-map 1 2) 1))
(test-equal 4 (t/get (t/hash-map 1 2 3 4) 3))
(test-eq 'not-found (t/get (t/hash-map) 1 'not-found))

(test-eqv "x" (t/reduce-kv / "x" (t/hash-map)))
(test-eqv 21 (t/reduce-kv (lambda (result k v) (+ result k v))
                          0
                          (t/hash-map 1 2 3 4 5 6)))

(let ((s (seq (t/hash-map 1 2 3 4))))
  (test-equal 2 (count s))
  (test-assert (map-entry? (first s)))
  (test-assert (map-entry? (second s)))
  (test-equal 1 (key (first s)))
  (test-equal 2 (val (first s)))
  (test-equal 3 (key (second s)))
  (test-equal 4 (val (second s))))

(test-assert (clj= (t/hash-map 1 2 3 4)
                   (merge (t/hash-map 1 2) (t/hash-map 3 4))))

(test-assert (clj= (t/hash-map 1 2 3 4)
                   (merge (t/hash-map 1 9) (t/hash-map 1 2 3 4))))

(test-end-and-exit 2)
