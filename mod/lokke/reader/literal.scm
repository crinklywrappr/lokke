;;; Copyright (C) 2020-2021 Rob Browning <rlb@defaultvalue.org>
;;; SPDX-License-Identifier: LGPL-2.1-or-later OR EPL-1.0+

;; This is the lowest level, supporting *everything*, including
;; definitions required by code generated by the compiler, etc., and
;; providing bits needed to bootstrap the system by compiling
;; clojure.core, i.e. (lokke ns clojure core).

(define-module (lokke reader literal)
  #:use-module ((ice-9 match) #:select (match))
  #:use-module ((lokke hash-map) #:select (hash-map? kv-list)) 
  #:use-module ((lokke base metadata) #:select (with-meta))
  #:use-module ((lokke transmogrify) #:select (clj-instances->literals))
  #:use-module ((srfi srfi-1) #:select (proper-list?))
  #:export (reader-hash-map
            reader-hash-map?
            reader-hash-map-elts
            reader-hash-map-meta
            reader-hash-set
            reader-hash-set-elts
            reader-hash-set-meta
            reader-meta
            reader-meta?
            reader-tagged
            reader-tagged?
            reader-tagged-data
            reader-tagged-tag
            reader-vector
            reader-vector?
            reader-vector-elts
            reader-vector-meta
            supports-reader-meta?
            with-reader-meta))

;; For now, we'll still promise that the first item is the symbol
;; distinguishing the item, i.e. not require require the use of
;; reader-hash-set? predicates, etc.

(define (meta-data-data? x)
  (or (eq? #nil x) (reader-hash-map? x)))

(define (reader-meta x)
  (list '/lokke/reader-meta x))

(define (reader-meta? x)
  (and (pair? x) (eq? '/lokke/reader-meta (car x))))

(define (reader-vector meta . elts)
  (cons* '/lokke/reader-vector meta elts))

(define (reader-vector? x)
  (and (pair? x) (proper-list? x)
       (eq? '/lokke/reader-vector (car x))
       (begin
         (unless (pair? (cdr x))
           (error "No metadata in reader vector:" x))
         (unless (meta-data-data? (cadr x))
           (error "Invalid metadata in reader vector:" x))
         #t)))

(define (reader-vector-meta m) (cadr m))
(define (reader-vector-elts m) (cddr m))


(define (reader-hash-set meta . elts)
  (cons* '/lokke/reader-hash-set meta elts))

(define (reader-hash-set? x)
  (and (pair? x) (eq? '/lokke/reader-hash-set (car x))))

(define (reader-hash-set-meta m) (cadr m))
(define (reader-hash-set-elts m) (cddr m))


(define (reader-hash-map meta . elts)
  (cons* '/lokke/reader-hash-map meta elts))

(define (reader-hash-map? x)
  (and (pair? x) (proper-list? x)
       (eq? '/lokke/reader-hash-map (car x))
       (let ((len (length x)))
         (unless (> len 1)
           (error "No metadata in reader map:" x))
         (unless (meta-data-data? (cadr x))
           (error "Invalid metadata in reader map:" x))
         (unless (even? len)
           (error "Missing value for key in reader map:" x))         
         #t)))

(define (reader-hash-map-meta m) (cadr m))
(define (reader-hash-map-elts m) (cddr m))

(define (reader-tagged tag data)
  (list '/lokke/reader-tagged tag data))

(define (reader-tagged? x)
  (match x
    (('/lokke/reader-tagged (? symbol? tag) data) #t)
    (_ #f)))

(define (reader-tagged-tag m) (cadr m))
(define (reader-tagged-data m) (caddr m))

(define (supports-reader-meta? x)
  (and (pair? x)
       (memq (car x) '(/lokke/reader-hash-set
                       /lokke/reader-hash-map
                       /lokke/reader-vector))
       #t))

(define (with-reader-meta x meta)
  (unless (or (hash-map? meta) (meta-data-data? meta))
    (scm-error 'wrong-type-arg 'with-reader-meta
               "metadata is not nil or a map: ~s" (list meta) (list meta)))
  (match x
    (((or '/lokke/reader-hash-set '/lokke/reader-hash-map '/lokke/reader-vector)
      existing-meta elt ...)
     (cons* (car x) (clj-instances->literals meta) elt))
    (_ (error "Reader cannot apply metadata to" x))))
